import os
import openai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler,
                          CallbackContext, CallbackQueryHandler,
                          MessageHandler, filters)
import database

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
database.init_db()

# üîë –£–∫–∞–∂–∏ —Å–≤–æ–π API-–∫–ª—é—á OpenAI
OPENAI_API_KEY =
openai.api_key = OPENAI_API_KEY

# üîë –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TOKEN =
chat_responses = [
    "–ö–∞–∫ –¥–µ–ª–∞? –ú–Ω–µ –≤—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è! üòä",
    "–í—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å, –∫–∞–∫–æ–π —É –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä? üí≠",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –Ø –≤–∞—Å —Å–ª—É—à–∞—é! üó£Ô∏è",
    "–ö–∞–∫ –Ω–∞—Å—á–µ—Ç –∫–æ—Ñ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –±–µ—Å–µ–¥—ã? ‚òïÔ∏è",
    "–í–∞—à–∞ —É–ª—ã–±–∫–∞ –æ—Å–≤–µ—â–∞–µ—Ç –º–æ–π –¥–µ–Ω—å! üåû",
    "–ß—Ç–æ –¥–ª—è –≤–∞—Å –∑–Ω–∞—á–∏—Ç –ª—é–±–æ–≤—å? ‚ù§Ô∏è"
]

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    database.add_user(user_id)

    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data='subscribe')],
        [InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data='unsubscribe')],
        [InlineKeyboardButton("–§–ª–∏—Ä—Ç", callback_data='flirt')],
        [InlineKeyboardButton("–û–±—â–µ–Ω–∏–µ", callback_data='chat')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if database.is_user_subscribed(user_id):
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –æ–±—â–µ–Ω–∏—è.', reply_markup=reply_markup)
    else:
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ñ–ª–∏—Ä—Ç–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É:', reply_markup=reply_markup)

async def inline_button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == 'subscribe':
        await subscribe(query, user_id)
    elif query.data == 'unsubscribe':
        await unsubscribe(query, user_id)
    elif query.data == 'flirt':
        await flirt(query, user_id)
    elif query.data == 'chat':
        await chat(query, user_id)

async def subscribe(query, user_id):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    database.set_subscription(user_id, 1)
    await query.edit_message_text('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å!')

async def unsubscribe(query, user_id):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    database.set_subscription(user_id, 0)
    await query.edit_message_text('–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É—Å–ª—É–≥. –ù–∞–¥–µ—é—Å—å, —É–≤–∏–¥–∏–º –≤–∞—Å —Å–Ω–æ–≤–∞!')

async def flirt(query, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–ª–∏—Ä—Ç–æ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω"""
    if database.is_user_subscribed(user_id):
        await query.edit_message_text('–§–ª–∏—Ä—Ç—É–µ–º! –ß—Ç–æ —Å–∫–∞–∂–µ—Ç–µ –æ —Å–≤–æ—ë–º –∏–¥–µ–∞–ª—å–Ω–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–µ?')
    else:
        await query.edit_message_text('–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ñ–ª–∏—Ä—Ç!')

async def chat(query, user_id):
    """–û–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ AI"""
    if database.is_user_subscribed(user_id):
        await query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!")
        context.user_data["chat_mode"] = True  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —á–∞—Ç–∞
    else:
        await query.edit_message_text('–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!')

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    if not database.is_user_subscribed(user_id):
        await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å!")
        return

    user_message = update.message.text
    bot_reply = await generate_ai_response(user_message)

    await update.message.reply_text(bot_reply)

async def generate_ai_response(user_input):
    """Generate a response from OpenAI API"""
    try:
        # Asynchronous call to OpenAI API to generate a response
        response = await openai.ChatCompletion.acreate(  # ‚ö° Using async call
            model="gpt-4",  # Change the model if needed (replace gpt-4 with gpt-3.5-turbo or others)
            messages=[{"role": "user", "content": user_input}]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        # Handle any errors from OpenAI API and provide a friendly error message
        return f"–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}"

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(inline_button_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()