import sqlite3
from flask import Flask, request, jsonify

app = Flask(__name__)

#  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def init_db():
    with sqlite3.connect('flirt_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                is_subscribed INTEGER DEFAULT 0 -- 0 = –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, 1 = –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            )
        ''')
        conn.commit()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
def add_user(user_id):
    with sqlite3.connect('flirt_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
        conn.commit()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (0 = –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, 1 = –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞)
def set_subscription(user_id, subscription_status):
    add_user(user_id)  # üìå –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    with sqlite3.connect('flirt_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET is_subscribed = ? WHERE user_id = ?', (subscription_status, user_id))
        conn.commit()
        cursor.execute('SELECT is_subscribed FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: user_id={user_id}, status={result[0]}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_user_subscribed(user_id):
    with sqlite3.connect('flirt_bot.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT is_subscribed FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        status = result[0] if result else 0
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: user_id={user_id}, –ø–æ–¥–ø–∏—Å–∫–∞={status}")
    return status  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 (–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏) –∏–ª–∏ 1 (–ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å)

# API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@app.route('/check_subscription', methods=['POST'])
def check_subscription():
    user_id = request.json.get('user_id')

    if user_id is None:
        return jsonify({"error": "User ID is required"}), 400

    subscription_status = is_user_subscribed(user_id)
    return jsonify({"is_active": bool(subscription_status)})

# API: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@app.route('/activate_subscription', methods=['POST'])
def activate_subscription():
    user_id = request.json.get('user_id')

    if user_id is None:
        return jsonify({"error": "User ID is required"}), 400

    set_subscription(user_id, 1)  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    return jsonify({"status": "Subscription activated"})

if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(debug=True)
